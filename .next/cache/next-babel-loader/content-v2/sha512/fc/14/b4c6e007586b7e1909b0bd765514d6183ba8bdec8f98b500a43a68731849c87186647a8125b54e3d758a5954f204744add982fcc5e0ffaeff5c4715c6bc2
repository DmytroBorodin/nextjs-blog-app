{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nconst postsDirPath = path.join(process.cwd(), \"content\", \"posts\");\n\nfunction getPostData(fileName) {\n  const filePath = path.join(postsDirPath, fileName);\n  const fileContent = fs.readFileSync(filePath, \"utf-8\"); //extract meta data and content from .md files\n\n  const {\n    data,\n    content\n  } = matter(fileContent);\n  const postSlug = fileName.replace(/\\.md$/, \"\");\n\n  const postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content\n  });\n\n  return postData;\n}\n\nexport function getAllPosts() {\n  const postFiles = fs.readdirSync(postsDirPath);\n  const postsData = postFiles.map(file => {\n    return getPostData(file);\n  });\n  const allSortedPosts = postsData.sort((postA, postB) => postA.date > postB.date ? -1 : 1);\n  return allSortedPosts;\n}\nexport function getFeaturedPosts() {\n  const allPosts = getAllPosts();\n  return allPosts.filter(post => post.isFeatured);\n}","map":{"version":3,"sources":["/Users/dmytro.borodin/Documents/NextJS/nextjs-blog-app/lib/post-utils.js"],"names":["fs","path","matter","postsDirPath","join","process","cwd","getPostData","fileName","filePath","fileContent","readFileSync","data","content","postSlug","replace","postData","slug","getAllPosts","postFiles","readdirSync","postsData","map","file","allSortedPosts","sort","postA","postB","date","getFeaturedPosts","allPosts","filter","post","isFeatured"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,YAAY,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,SAAzB,EAAoC,OAApC,CAArB;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,QAAMC,QAAQ,GAAGR,IAAI,CAACG,IAAL,CAAUD,YAAV,EAAwBK,QAAxB,CAAjB;AACA,QAAME,WAAW,GAAGV,EAAE,CAACW,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAApB,CAF6B,CAI7B;;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBX,MAAM,CAACQ,WAAD,CAAhC;AACA,QAAMI,QAAQ,GAAGN,QAAQ,CAACO,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAjB;;AACA,QAAMC,QAAQ;AACZC,IAAAA,IAAI,EAAEH;AADM,KAETF,IAFS;AAGZC,IAAAA;AAHY,IAAd;;AAMA,SAAOG,QAAP;AACD;;AAED,OAAO,SAASE,WAAT,GAAuB;AAC5B,QAAMC,SAAS,GAAGnB,EAAE,CAACoB,WAAH,CAAejB,YAAf,CAAlB;AAEA,QAAMkB,SAAS,GAAGF,SAAS,CAACG,GAAV,CAAeC,IAAD,IAAU;AACxC,WAAOhB,WAAW,CAACgB,IAAD,CAAlB;AACD,GAFiB,CAAlB;AAIA,QAAMC,cAAc,GAAGH,SAAS,CAACI,IAAV,CAAe,CAACC,KAAD,EAAQC,KAAR,KACpCD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,CAAC,CAA3B,GAA+B,CADV,CAAvB;AAIA,SAAOJ,cAAP;AACD;AAED,OAAO,SAASK,gBAAT,GAA4B;AACjC,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,SAAOY,QAAQ,CAACC,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,UAA/B,CAAP;AACD","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\n\nconst postsDirPath = path.join(process.cwd(), \"content\", \"posts\");\n\nfunction getPostData(fileName) {\n  const filePath = path.join(postsDirPath, fileName);\n  const fileContent = fs.readFileSync(filePath, \"utf-8\");\n\n  //extract meta data and content from .md files\n  const { data, content } = matter(fileContent);\n  const postSlug = fileName.replace(/\\.md$/, \"\");\n  const postData = {\n    slug: postSlug,\n    ...data,\n    content,\n  };\n\n  return postData;\n}\n\nexport function getAllPosts() {\n  const postFiles = fs.readdirSync(postsDirPath);\n\n  const postsData = postFiles.map((file) => {\n    return getPostData(file);\n  });\n\n  const allSortedPosts = postsData.sort((postA, postB) =>\n    postA.date > postB.date ? -1 : 1\n  );\n\n  return allSortedPosts;\n}\n\nexport function getFeaturedPosts() {\n  const allPosts = getAllPosts();\n  return allPosts.filter((post) => post.isFeatured);\n}\n"]},"metadata":{},"sourceType":"module"}