{"ast":null,"code":"const {\n  MongoClient\n} = require(\"mongodb\");\n\nexport default async function handler(req, res) {\n  if (req.method === \"POST\") {\n    const {\n      email,\n      name,\n      message\n    } = req.body;\n\n    if (!email || !email.includes(\"@\") || !name || name.trim() === \"\" || !message || message.trim() === \"\") {\n      res.status(500).json({\n        message: \"Invalid input value\"\n      });\n      return;\n    }\n\n    const newMessage = {\n      email,\n      name,\n      message\n    };\n    let client;\n    const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_cluster}.rptrona.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n\n    try {\n      client = await MongoClient.connect(connectionString);\n    } catch (error) {\n      res.status(500).json({\n        message: error\n      });\n      return;\n    }\n\n    const db = client.db();\n    let result;\n\n    try {\n      result = await db.collection(\"my-blog\").insertOne(newMessage);\n    } catch (error) {\n      client.close();\n      res.status(500).json({\n        message: \"Storing message is failed\"\n      });\n      return;\n    }\n\n    console.log(newMessage, result);\n    client.close();\n    res.status(201).json({\n      message: \"Success!\"\n    });\n  }\n}","map":{"version":3,"sources":["/Users/dmytro.borodin/Documents/NextJS/nextjs-blog-app/pages/api/contact.js"],"names":["MongoClient","require","handler","req","res","method","email","name","message","body","includes","trim","status","json","newMessage","client","connectionString","process","env","mongodb_username","mongodb_password","mongodb_cluster","mongodb_database","connect","error","db","result","collection","insertOne","close","console","log"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,SAAD,CAA/B;;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAA2BL,GAAG,CAACM,IAArC;;AAEA,QACE,CAACH,KAAD,IACA,CAACA,KAAK,CAACI,QAAN,CAAe,GAAf,CADD,IAEA,CAACH,IAFD,IAGAA,IAAI,CAACI,IAAL,OAAgB,EAHhB,IAIA,CAACH,OAJD,IAKAA,OAAO,CAACG,IAAR,OAAmB,EANrB,EAOE;AACAP,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD;;AAED,UAAMM,UAAU,GAAG;AACjBR,MAAAA,KADiB;AAEjBC,MAAAA,IAFiB;AAGjBC,MAAAA;AAHiB,KAAnB;AAMA,QAAIO,MAAJ;AAEA,UAAMC,gBAAgB,GAAI,iBAAgBC,OAAO,CAACC,GAAR,CAAYC,gBAAiB,IAAGF,OAAO,CAACC,GAAR,CAAYE,gBAAiB,IAAGH,OAAO,CAACC,GAAR,CAAYG,eAAgB,wBAAuBJ,OAAO,CAACC,GAAR,CAAYI,gBAAiB,8BAA1L;;AAEA,QAAI;AACFP,MAAAA,MAAM,GAAG,MAAMf,WAAW,CAACuB,OAAZ,CAAoBP,gBAApB,CAAf;AACD,KAFD,CAEE,OAAOQ,KAAP,EAAc;AACdpB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAEgB;AAAX,OAArB;AACA;AACD;;AAED,UAAMC,EAAE,GAAGV,MAAM,CAACU,EAAP,EAAX;AACA,QAAIC,MAAJ;;AACA,QAAI;AACFA,MAAAA,MAAM,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,SAAd,EAAyBC,SAAzB,CAAmCd,UAAnC,CAAf;AACD,KAFD,CAEE,OAAOU,KAAP,EAAc;AACdT,MAAAA,MAAM,CAACc,KAAP;AACAzB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD;;AAEDsB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,UAAZ,EAAwBY,MAAxB;AACAX,IAAAA,MAAM,CAACc,KAAP;AACAzB,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD;AACF","sourcesContent":["const { MongoClient } = require(\"mongodb\");\n\nexport default async function handler(req, res) {\n  if (req.method === \"POST\") {\n    const { email, name, message } = req.body;\n\n    if (\n      !email ||\n      !email.includes(\"@\") ||\n      !name ||\n      name.trim() === \"\" ||\n      !message ||\n      message.trim() === \"\"\n    ) {\n      res.status(500).json({ message: \"Invalid input value\" });\n      return;\n    }\n\n    const newMessage = {\n      email,\n      name,\n      message,\n    };\n\n    let client;\n\n    const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_cluster}.rptrona.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n\n    try {\n      client = await MongoClient.connect(connectionString);\n    } catch (error) {\n      res.status(500).json({ message: error });\n      return;\n    }\n\n    const db = client.db();\n    let result;\n    try {\n      result = await db.collection(\"my-blog\").insertOne(newMessage);\n    } catch (error) {\n      client.close();\n      res.status(500).json({ message: \"Storing message is failed\" });\n      return;\n    }\n\n    console.log(newMessage, result);\n    client.close();\n    res.status(201).json({ message: \"Success!\" });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}