{"ast":null,"code":"import _defineProperty from \"/Users/dmytro.borodin/Documents/NextJS/nextjs-blog-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nvar postsDirPath = path.join(process.cwd(), \"content\", \"posts\");\nexport function getPostFiles() {\n  return fs.readdirSync(postsDirPath);\n}\nexport function getPostData(postIdentifier) {\n  var postSlug = postIdentifier.replace(/\\.md$/, \"\");\n  var filePath = path.join(postsDirPath, \"\".concat(postSlug, \".md\"));\n  var fileContent = fs.readFileSync(filePath, \"utf-8\"); //extract meta data and content from .md files\n\n  var _matter = matter(fileContent),\n      data = _matter.data,\n      content = _matter.content;\n\n  var postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content: content\n  });\n\n  return postData;\n}\nexport function getAllPosts() {\n  var postFiles = getPostFiles();\n  var postsData = postFiles.map(function (file) {\n    return getPostData(file);\n  });\n  var allSortedPosts = postsData.sort(function (postA, postB) {\n    return postA.date > postB.date ? -1 : 1;\n  });\n  return allSortedPosts;\n}\nexport function getFeaturedPosts() {\n  var allPosts = getAllPosts();\n  return allPosts.filter(function (post) {\n    return post.isFeatured;\n  });\n}","map":{"version":3,"sources":["/Users/dmytro.borodin/Documents/NextJS/nextjs-blog-app/lib/post-utils.js"],"names":["fs","path","matter","postsDirPath","join","process","cwd","getPostFiles","readdirSync","getPostData","postIdentifier","postSlug","replace","filePath","fileContent","readFileSync","data","content","postData","slug","getAllPosts","postFiles","postsData","map","file","allSortedPosts","sort","postA","postB","date","getFeaturedPosts","allPosts","filter","post","isFeatured"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,IAAMC,YAAY,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,SAAzB,EAAoC,OAApC,CAArB;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAOP,EAAE,CAACQ,WAAH,CAAeL,YAAf,CAAP;AACD;AAED,OAAO,SAASM,WAAT,CAAqBC,cAArB,EAAqC;AAC1C,MAAMC,QAAQ,GAAGD,cAAc,CAACE,OAAf,CAAuB,OAAvB,EAAgC,EAAhC,CAAjB;AACA,MAAMC,QAAQ,GAAGZ,IAAI,CAACG,IAAL,CAAUD,YAAV,YAA2BQ,QAA3B,SAAjB;AACA,MAAMG,WAAW,GAAGd,EAAE,CAACe,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAApB,CAH0C,CAK1C;;AAL0C,gBAMhBX,MAAM,CAACY,WAAD,CANU;AAAA,MAMlCE,IANkC,WAMlCA,IANkC;AAAA,MAM5BC,OAN4B,WAM5BA,OAN4B;;AAO1C,MAAMC,QAAQ;AACZC,IAAAA,IAAI,EAAER;AADM,KAETK,IAFS;AAGZC,IAAAA,OAAO,EAAPA;AAHY,IAAd;;AAMA,SAAOC,QAAP;AACD;AAED,OAAO,SAASE,WAAT,GAAuB;AAC5B,MAAMC,SAAS,GAAGd,YAAY,EAA9B;AAEA,MAAMe,SAAS,GAAGD,SAAS,CAACE,GAAV,CAAc,UAACC,IAAD,EAAU;AACxC,WAAOf,WAAW,CAACe,IAAD,CAAlB;AACD,GAFiB,CAAlB;AAIA,MAAMC,cAAc,GAAGH,SAAS,CAACI,IAAV,CAAe,UAACC,KAAD,EAAQC,KAAR;AAAA,WACpCD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,CAAC,CAA3B,GAA+B,CADK;AAAA,GAAf,CAAvB;AAIA,SAAOJ,cAAP;AACD;AAED,OAAO,SAASK,gBAAT,GAA4B;AACjC,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,SAAOW,QAAQ,CAACC,MAAT,CAAgB,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,UAAf;AAAA,GAAhB,CAAP;AACD","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\n\nconst postsDirPath = path.join(process.cwd(), \"content\", \"posts\");\n\nexport function getPostFiles() {\n  return fs.readdirSync(postsDirPath);\n}\n\nexport function getPostData(postIdentifier) {\n  const postSlug = postIdentifier.replace(/\\.md$/, \"\");\n  const filePath = path.join(postsDirPath, `${postSlug}.md`);\n  const fileContent = fs.readFileSync(filePath, \"utf-8\");\n\n  //extract meta data and content from .md files\n  const { data, content } = matter(fileContent);\n  const postData = {\n    slug: postSlug,\n    ...data,\n    content,\n  };\n\n  return postData;\n}\n\nexport function getAllPosts() {\n  const postFiles = getPostFiles();\n\n  const postsData = postFiles.map((file) => {\n    return getPostData(file);\n  });\n\n  const allSortedPosts = postsData.sort((postA, postB) =>\n    postA.date > postB.date ? -1 : 1\n  );\n\n  return allSortedPosts;\n}\n\nexport function getFeaturedPosts() {\n  const allPosts = getAllPosts();\n  return allPosts.filter((post) => post.isFeatured);\n}\n"]},"metadata":{},"sourceType":"module"}